// Generated by Dogma Dart. DO NOT MODIFY!
// 2016-08-19 12:36:50.431303

library sense_model.src.models.nx_options;

//---------------------------------------------------------------------
// Imports
//---------------------------------------------------------------------

import 'package:dogma_convert/serialize.dart';
import 'nx_bar_grouping.dart';
import 'nx_color.dart';
import 'nx_data_point.dart';
import 'nx_dimension_axis.dart';
import 'nx_donut.dart';
import 'nx_grid_line.dart';
import 'nx_legend.dart';
import 'nx_measure_axis.dart';
import 'nx_ref_line_container.dart';
import 'q_hyper_cube_def.dart';

//---------------------------------------------------------------------
// Library contents
//---------------------------------------------------------------------

class NxOptions {
  @Serialize.field('title')
  String title;
  @Serialize.field('showTitles', optional: true)
  bool showTitles;
  @Serialize.field('subtitle', optional: true)
  String subtitle;
  @Serialize.field('footnote', optional: true)
  String footnote;
  @Serialize.field('preferContinuousAxis', optional: true)
  bool preferContinuousAxis;

  /// Bar grouping settings
  @Serialize.field('barGrouping', optional: true)
  NxBarGrouping barGrouping;

  /// Pie chart donut settings.
  @Serialize.field('donut', optional: true)
  NxDonut donut;

  /// Data point settings
  @Serialize.field('dataPoint', optional: true)
  NxDataPoint dataPoint;

  /// Legend settings
  @Serialize.field('legend', optional: true)
  NxLegend legend;

  /// Legend settings
  @Serialize.field('dimensionAxis', optional: true)
  NxDimensionAxis dimensionAxis;

  /// Legend settings
  @Serialize.field('measureAxis', optional: true)
  NxMeasureAxis measureAxis;

  /// Color properties
  @Serialize.field('color', optional: true)
  NxColor color;

  /// Sets the null value presentation
  @Serialize.field('nullMode', optional: true)
  String nullMode;

  /// Set the type of line chart. Can be one of:
  @Serialize.field('lineType', optional: true)
  String lineType;

  /// Stack areas. Dependent of lineType property.
  @Serialize.field('stackedArea', optional: true)
  bool stackedArea;

  /// Set to stack positive and negative values separately. Dependent of lineType
  /// property.
  @Serialize.field('separateStacking', optional: true)
  bool separateStacking;

  /// Grid line settings
  @Serialize.field('gridLine', optional: true)
  NxGridLine gridLine;

  /// Reference line settings.
  @Serialize.field('refLine', optional: true)
  NxRefLineContainer refLine;

  /// Orientation settings. If vertical, the dimension axis can only be docked on
  /// bottom or top and measure axis on left or right
  @Serialize.field('orientation', optional: true)
  String orientation;
  @Serialize.field('qHyperCubeDef', optional: true)
  QHyperCubeDef qHyperCubeDef;
}
