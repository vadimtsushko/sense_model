// Generated by Dogma Dart. DO NOT MODIFY!

library sense_model.src.convert.iv_measure_family_convert;

//---------------------------------------------------------------------
// Standard libraries
//---------------------------------------------------------------------

import 'dart:convert';

//---------------------------------------------------------------------
// Imports
//---------------------------------------------------------------------

import 'package:dogma_convert/convert.dart';
import 'package:sense_model/models.dart';
import 'locale_display_name_convert.dart';

//---------------------------------------------------------------------
// Library contents
//---------------------------------------------------------------------

/// A [ModelDecoder] for [IvMeasureFamily].
class IvMeasureFamilyDecoder extends Converter<Map, IvMeasureFamily>
    implements ModelDecoder<IvMeasureFamily> {
  final Converter<Map, LocaleDisplayName> _localeDisplayNameDecoder;
  IvMeasureFamilyDecoder()
      : _localeDisplayNameDecoder = new LocaleDisplayNameDecoder();
  IvMeasureFamilyDecoder.using(this._localeDisplayNameDecoder);
  @override
  IvMeasureFamily create() => new IvMeasureFamily();
  @override
  IvMeasureFamily convert(Map input, [IvMeasureFamily model]) {
    model ??= create();

    model.key = input['key'];
    model.displayName = input['displayName'];
    var localeDisplayName = input['localeDisplayName'];
    if (localeDisplayName != null) {
      model.localeDisplayName =
          _localeDisplayNameDecoder.convert(localeDisplayName);
    }
    model.hasPlan = input['hasPlan'];
    model.inverted = input['inverted'];
    model.percentValue = input['percentValue'];
    model.currency = input['currency'];
    model.format = input['format'];
    model.defaultMultiplier = input['defaultMultiplier'];
    model.monthly = input['monthly'];
    model.solidcolor = input['solidcolor'];
    return model;
  }
}

/// A [ModelEncoder] for [IvMeasureFamily].
class IvMeasureFamilyEncoder extends Converter<IvMeasureFamily, Map>
    implements ModelEncoder<IvMeasureFamily> {
  final Converter<LocaleDisplayName, Map> _localeDisplayNameEncoder;
  IvMeasureFamilyEncoder()
      : _localeDisplayNameEncoder = new LocaleDisplayNameEncoder();
  IvMeasureFamilyEncoder.using(this._localeDisplayNameEncoder);
  @override
  Map convert(IvMeasureFamily input) {
    var model = {};

    model['key'] = input.key;
    model['displayName'] = input.displayName;
    var localeDisplayName = input.localeDisplayName;
    if (localeDisplayName != null) {
      model['localeDisplayName'] =
          _localeDisplayNameEncoder.convert(localeDisplayName);
    }
    var hasPlan = input.hasPlan;
    if (hasPlan != null) {
      model['hasPlan'] = hasPlan;
    }
    var inverted = input.inverted;
    if (inverted != null) {
      model['inverted'] = inverted;
    }
    var percentValue = input.percentValue;
    if (percentValue != null) {
      model['percentValue'] = percentValue;
    }
    var currency = input.currency;
    if (currency != null) {
      model['currency'] = currency;
    }
    var format = input.format;
    if (format != null) {
      model['format'] = format;
    }
    var defaultMultiplier = input.defaultMultiplier;
    if (defaultMultiplier != null) {
      model['defaultMultiplier'] = defaultMultiplier;
    }
    var monthly = input.monthly;
    if (monthly != null) {
      model['monthly'] = monthly;
    }
    var solidcolor = input.solidcolor;
    if (solidcolor != null) {
      model['solidcolor'] = solidcolor;
    }

    return model;
  }
}
