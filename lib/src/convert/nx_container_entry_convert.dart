// Generated by Dogma Dart. DO NOT MODIFY!

library sense_model.src.convert.nx_container_entry_convert;

//---------------------------------------------------------------------
// Standard libraries
//---------------------------------------------------------------------

import 'dart:convert';

//---------------------------------------------------------------------
// Imports
//---------------------------------------------------------------------

import 'package:dogma_convert/convert.dart';
import 'package:sense_model/models.dart';
import 'nx_info_convert.dart';
import 'nx_meta_convert.dart';

//---------------------------------------------------------------------
// Library contents
//---------------------------------------------------------------------

/// A [ModelDecoder] for [NxContainerEntry].
class NxContainerEntryDecoder extends Converter<Map, NxContainerEntry>
    implements ModelDecoder<NxContainerEntry> {
  final Converter<Map, NxInfo> _nxInfoDecoder;
  final Converter<Map, NxMeta> _nxMetaDecoder;
  NxContainerEntryDecoder()
      : _nxInfoDecoder = new NxInfoDecoder(),
        _nxMetaDecoder = new NxMetaDecoder();
  NxContainerEntryDecoder.using(this._nxInfoDecoder, this._nxMetaDecoder);
  @override
  NxContainerEntry create() => new NxContainerEntry();
  @override
  NxContainerEntry convert(Map input, [NxContainerEntry model]) {
    model ??= create();

    model.qInfo = _nxInfoDecoder.convert(input['qInfo']);
    var qMeta = input['qMeta'];
    if (qMeta != null) {
      model.qMeta = _nxMetaDecoder.convert(qMeta);
    }

    return model;
  }
}

/// A [ModelEncoder] for [NxContainerEntry].
class NxContainerEntryEncoder extends Converter<NxContainerEntry, Map>
    implements ModelEncoder<NxContainerEntry> {
  final Converter<NxInfo, Map> _nxInfoEncoder;
  final Converter<NxMeta, Map> _nxMetaEncoder;
  NxContainerEntryEncoder()
      : _nxInfoEncoder = new NxInfoEncoder(),
        _nxMetaEncoder = new NxMetaEncoder();
  NxContainerEntryEncoder.using(this._nxInfoEncoder, this._nxMetaEncoder);
  @override
  Map convert(NxContainerEntry input) {
    var model = {};

    model['qInfo'] = _nxInfoEncoder.convert(input.qInfo);
    var qMeta = input.qMeta;
    if (qMeta != null) {
      model['qMeta'] = _nxMetaEncoder.convert(qMeta);
    }

    return model;
  }
}
