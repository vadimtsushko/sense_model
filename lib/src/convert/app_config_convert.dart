// Generated by Dogma Dart. DO NOT MODIFY!

library sense_model.src.convert.app_config_convert;

//---------------------------------------------------------------------
// Standard libraries
//---------------------------------------------------------------------

import 'dart:convert';

//---------------------------------------------------------------------
// Imports
//---------------------------------------------------------------------

import 'package:dogma_convert/convert.dart';
import 'package:sense_model/models.dart';
import 'app_config_item_convert.dart';

//---------------------------------------------------------------------
// Library contents
//---------------------------------------------------------------------

/// A [ModelDecoder] for [AppConfig].
class AppConfigDecoder extends Converter<Map, AppConfig>
    implements ModelDecoder<AppConfig> {
  final Converter<Map, AppConfigItem> _appConfigItemDecoder;
  AppConfigDecoder() : _appConfigItemDecoder = new AppConfigItemDecoder();
  AppConfigDecoder.using(this._appConfigItemDecoder);
  @override
  AppConfig create() => new AppConfig();
  @override
  AppConfig convert(Map input, [AppConfig model]) {
    model ??= create();

    model.host = input['host'];
    model.id = input['id'];
    model.name = input['name'];
    model.lang = input['lang'];
    model.useCurrentDate = input['useCurrentDate'];
    model.currentYear = input['currentYear'];
    model.port = input['port'];
    var apps = input['apps'];
    if (apps != null) {
      var appsTemp0 = <AppConfigItem>[];
      for (var appsValue0 in apps) {
        appsTemp0.add(_appConfigItemDecoder.convert(appsValue0));
      }
      model.apps = appsTemp0;
    }
    model.currentMonth = input['currentMonth'];
    return model;
  }
}

/// A [ModelEncoder] for [AppConfig].
class AppConfigEncoder extends Converter<AppConfig, Map>
    implements ModelEncoder<AppConfig> {
  final Converter<AppConfigItem, Map> _appConfigItemEncoder;
  AppConfigEncoder() : _appConfigItemEncoder = new AppConfigItemEncoder();
  AppConfigEncoder.using(this._appConfigItemEncoder);
  @override
  Map convert(AppConfig input) {
    var model = {};

    model['host'] = input.host;
    model['id'] = input.id;
    model['name'] = input.name;
    var lang = input.lang;
    if (lang != null) {
      model['lang'] = lang;
    }
    var useCurrentDate = input.useCurrentDate;
    if (useCurrentDate != null) {
      model['useCurrentDate'] = useCurrentDate;
    }
    var currentYear = input.currentYear;
    if (currentYear != null) {
      model['currentYear'] = currentYear;
    }
    var port = input.port;
    if (port != null) {
      model['port'] = port;
    }
    var apps = input.apps;
    if (apps != null) {
      var appsTemp0 = [];
      for (var appsValue0 in apps) {
        appsTemp0.add(_appConfigItemEncoder.convert(appsValue0));
      }
      model['apps'] = appsTemp0;
    }
    var currentMonth = input.currentMonth;
    if (currentMonth != null) {
      model['currentMonth'] = currentMonth;
    }

    return model;
  }
}
