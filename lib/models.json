{
	"$schema": "http://json-schema.org/draft-04/schema#",
	"title": "Sense",
	"description": "Qlik Sense Engine API structs",
	"additionalProperties" : false,
	"required" : [ "toValidate" ],
	"properties" : {
		"toValidate" : { "$ref" : "#/definitions/ChartDefinition" }
	},
	"definitions":
	{
		"NxDataPage":
		{
			"properties":
			{
				"qMatrix":
				{
					"description": "Some text",
					"type": "string"
				},
				"qNum":
				{
					"description": "A value",
					"type": "number"
				},

				"qElemNumber":
				{
					"description": "Rank number of the value, starting from 0.",
					"type": "integer"
				},
				"qState":
				{
					"description": "State of the value. The default state for a measure is L.",
					"type": "string",
					"enum": ["L","S","O","D","A","X","XS","XL"]
				},
				"qIsEmpty":
				{
					"description": "Is set to true, if qText and qNum are empty.",
					"type": "boolean"
				},
				"qIsTotalCell":
				{
					"description": "Is set to true if a total is displayed in the cell.Not applicable to list objects.",
					"type": "boolean"
				},
				"qIsOtherCell":
				{
					"description": "If set to true if the cell belongs to the group Others..Not applicable to list objects.",
					"type": "boolean"
				},
				"qFrequency":
				{
					"description": "Frequency of the value.",
					"type": "string"
				},
				"qIsNull":
				{
					"description": "Is set to true if the value is Null.",
					"type": "boolean"
				}
			},
			"additionalProperties": false,
			"required":
			[
				"qText"
			]
		},
		"NxCell":
		{
			"properties":
			{
				"qText":
				{
					"description": "Some text",
					"type": "string"
				},
				"qNum":
				{
					"description": "A value",
					"type": "number"
				},

				"qElemNumber":
				{
					"description": "Rank number of the value, starting from 0.",
					"type": "integer"
				},
				"qState":
				{
					"description": "State of the value. The default state for a measure is L.",
					"type": "string",
					"enum": ["L","S","O","D","A","X","XS","XL"]
				},
				"qIsEmpty":
				{
					"description": "Is set to true, if qText and qNum are empty.",
					"type": "boolean"
				},
				"qIsTotalCell":
				{
					"description": "Is set to true if a total is displayed in the cell.Not applicable to list objects.",
					"type": "boolean"
				},
				"qIsOtherCell":
				{
					"description": "If set to true if the cell belongs to the group Others..Not applicable to list objects.",
					"type": "boolean"
				},
				"qFrequency":
				{
					"description": "Frequency of the value.",
					"type": "string"
				},
				"qIsNull":
				{
					"description": "Is set to true if the value is Null.",
					"type": "boolean"
				}
			},
			"additionalProperties": false,
			"required":
			[
				"qText"
			]
		},
		"SelectionTableData":
		{
			"properties":
			{
				"tableId":
				{
					"description": "Код таблицы выбора",
					"type": "string"
				},
				"tableType":
				{
					"description": "Тип выбираемого значения",
					"type": "string",
					"enum": ["Dimension","Measure"]
				},
				"multiple":
				{
					"description": "Множественный выбор",
					"type": "boolean",
					"default": false
				},
				"tableItems":
				{
					"type": "array",
					"items":
					{
						"$ref": "#/definitions/SelectionTableItem"
					}
				}
			},
			"additionalProperties": false,
			"required":
			[
				"tableId",
				"tableType",
				"tableItems"
			]
		},
		"SelectionTableItem":
		{
			"properties":
			{
				"value":
				{
					"description": "Код поля или выражения",
					"type": "string"
				},
				"isHierarchy":
				{
					"description": "Является ли это значение иерархическим измерением (рантайм параметр)",
					"type": "boolean"
				},
				"param":
				{
					"description": "Дополнительный параметр (обычно не отображается в списках выбора)",
					"type": "string"
				},
				"displayValue":
				{
					"description": "Строка, которое будет отображаться в списке выбора",
					"type": "string"
				}
			},
			"additionalProperties": false,
			"required":
			[
				"value"
			]
		},
		"IvKeyValuePair":
		{
			"properties":
			{
				"key":
				{
					"description": "Код",
					"type": "string"
				},
				"value":
				{
					"description": "Значение",
					"type": "string"
				}
			},
			"additionalProperties": false,
			"required":
			[
				"key", "value"
			]
		},

		"IvFilterParam":
		{
			"properties": 
			{
				"fieldName": 
				{
					"description": "Поле для фильтра",
					"type": "string"
				},
				"fieldValue": 
				{
					"description": "Значение фильтра",
					"type": "string"
				}
			},
			"additionalProperties": false,
			"required": 
			[
				"fieldName",
				"fieldValue"
			]
		},
		"IvMasterDimension":
		{
			"properties":
			{
				"id":
				{
					"description": "Код мастер-измерения",
					"type": "string"
				},
				"title":
				{
					"description": "Заголовок мастер-измерения",
					"type": "string"
				},
				"grouping":
				{
					"description": "Группировка",
					"type": "string"
				},
				"width":
				{
					"description": "Ширина колонки по умолчанию",
					"type": "integer"
				},
				"labels":
				{
					"description": "Список заголовков",
					"type": "array",
					"items":
					{
						"type": "string"
					}
				},
				"fields":
				{
					"description": "Список полей",
					"type": "array",
					"items":
					{
						"type": "string"
					}
				}
			},
			"additionalProperties": false,
			"required":
			[
				"id"
			]
		},
		"IvDimension":
		{
			"properties": 
			{
				"isStatic":
				{
					"description": "Статическое ли это измерение",
					"type": "boolean"
				},
				"dynamicHyerarchy":
				{
					"description": "Динамически создаваемая иерархия",
					"type": "boolean"
				},
				"contitional":
				{
					"description": "Необходимо проверить условие отображения колонки",
					"type": "string"
				},
				"width":
				{
					"description": "Ширина колонки",
					"type": "integer"
				},
				"sortByExpression":
				{
					"description": "Выражение сортировки (по убыванию)",
					"$ref": "#/definitions/IvMeasure"
				},
                "visible":
                {
                  "description": "Показывать колонку (рантайм параметр)",
                  "type": "boolean",
                  "default": true
                },
				"backgroundColor":
				{
					"description": "",
					"$ref": "#/definitions/IvAttrExpression"
				},
				"fontColor":
				{
					"description": "",
					"$ref": "#/definitions/IvAttrExpression"
				},
				"key":
				{
					"description": "Код поля (если измерение статическое), либо название динамической таблицы, откуда будет получен текущий код поля",
					"type": "string"
				}
			},
			"additionalProperties": false,
			"required": 
			[
				"key"
			]
		},
		"IvAttrExpression":
		{
			"properties":
			{
				"expression":
				{
					"description": "Код",
					"type": "string"
				},
				"inPlace":
				{
					"description": "Статическая ли это выражение",
					"type": "boolean",
					"default": true
				},
				"isStatic":
				{
					"description": "Статическая ли это выражение",
					"type": "boolean",
					"default": true
				}
			},
			"additionalProperties": false,
			"required":
			[
				"expression"
			]
		},

		"IvMeasure":
		{
			"properties": 
			{
				"isStatic":
				{
					"description": "Статическая ли это мера",
					"type": "boolean",
                    "default": true
				},
				"key": 
				{
					"description": "Код поля (если измерение статическое), либо название динамической таблицы, откуда будет получен текущий код поля",
					"type": "string"
				},
				"param":
				{
					"description": "Дополнительный параметр для выбора динамической меры",
					"type": "string"
				},
				"conditional":
				{
					"description": "Необходимо проверить условие отображения колонки",
                    "type": "boolean",
                    "default": false
				},
				"qSortBy":
				{
					"description": "Defines the sort criteria",
					"$ref": "#/definitions/NxSortCriteria"
				},
				"width":
				{
					"description": "Ширина колонки",
					"type": "integer"
				},
				"qRelative":
				{
					"description": "If set to true, percentage values are returned instead of absolute numbers.",
					"type": "boolean",
					"default": false
				},
				"qAccumulate":
				{
					"description": "Режим накопления (0 по умолчанию, 1 - полное накопление)",
					"type": "integer",
					"default": 0
				},
				"qBrutalSum":
				{
					"description": "If set to true, the sum of rows total should be used rather than real expression total",
					"type": "boolean"
				},
				"qAggrFunc":
				{
					"description": "Aggregate function",
					"enum": ["Sum","Min","Max","Avg"],
					"type": "string"
				},
				"backgroundColor":
				{
					"description": "",
					"$ref": "#/definitions/IvAttrExpression"
				},
				"fontColor":
				{
					"description": "",
					"$ref": "#/definitions/IvAttrExpression"
				},
                "visible":
                {
                  "description": "Показывать колонку (рантайм параметр)",
                  "type": "boolean",
                  "default": true
                },
				"series":
				{
					"description": "Дополнительные параметры меры для комбочарта",
					"$ref": "#/definitions/NxMeasureSeries"
				},
				"sortOrder":
				{
					"description": "Направление сортировки (когда мера используется как мера для сортировки)",
					"type": "integer",
					"enum": [-1, 1]
				},

				"filters":
				{
					"description": "Дополнительный фильтр (используется только для динамических мер)",
					"type": "array",
					"items": 
					{
						"$ref": "#/definitions/IvFilterParam"
					}
				}
			},
			"additionalProperties": false,
			"required": 
			[
				"key"
			]
		},
		"ChartDefinition":
		{
			"properties":
			{
				"chartType": 
				{
					"description": "Тип визуализации",
					"type": "string",
					"enum": 
					[
						"table",
						"pivot-table",
						"session-table",
						"barchart",
						"piechart",
						"linechart",
						"combochart"
					]
				},
				"chartId":
				{
					"description": "Код элемента визуализации",
					"type": "string"
				},

				"dimensions":
				{
					"description": "Список измерений",
					"type": "array",
					"minItems": 1,
					"items": 
					{
						"$ref": "#/definitions/IvDimension"
					}
				},
				"measuresSelector":
				{
					"description": "Код таблицы селектора для множественного выбора мер (используется вместо списка мер в генераторе отчетов)",
					"type": "string"
				},
				"hierarchySelectors":
				{
					"type": "array",
					"items":
					{
						"type": "string"
					}
				},
				"measures":
				{
					"description": "Список мер",
					"type": "array",
					"minItems": 1,
					"items": 
					{
						"$ref": "#/definitions/IvMeasure"
					}
				},
				"title":
				{
					"type": "string"
				},
				"showTitles":
				{
					"type": "boolean"
				},
				"updateAfterCreation":
				{
					"type": "boolean",
					"default": false

				},
				"alwaysRecreate":
				{
					"type": "boolean",
					"default": false

				},
				"refLine":
				{
					"description": "Reference line settings.",
					"$ref": "#/definitions/NxRefLineContainer"
				},
				"autoWidth":
				{
					"type": "boolean"
				},

				"subtitle":
				{
					"type": "string"
				},
				"footnote":
				{
					"type": "string"
				},
				"barGrouping":
				{
					"description": "Bar grouping settings",
					"$ref": "#/definitions/NxBarGrouping"
				},
				"donut":
				{
					"description": "Piechart donut properties",
					"$ref": "#/definitions/NxDonut"
				},
				"color":
				{
					"description": "Color properties",
					"$ref": "#/definitions/NxColor"
				},
				"dataPoint":
				{
					"description": "Data point settings",
					"$ref": "#/definitions/NxDataPoint"
				},
				"legend":
				{
					"description": "Legend settings",
					"$ref": "#/definitions/NxLegend"
				},
				"dimensionAxis":
				{
					"description": "Legend settings",
					"$ref": "#/definitions/NxDimensionAxis"
				},
				"qInitialDataFetch":
				{
					"description": "Initial data set",
					"$ref": "#/definitions/NxPage"
				},
				"measureAxis":
				{
					"description": "Legend settings",
					"$ref": "#/definitions/NxMeasureAxis"
				},
				"preferContinuousAxis":
				{
					"type": "boolean"
				},

				"nullMode":
				{
					"description": "Sets the null value presentation",
					"enum": ["gap","connect","zero"],
					"type": "string"
				},
				"lineType":
				{
					"description": "Set the type of line chart. Can be one of:",
					"enum": ["line","area"],
					"type": "string"
				},
				"stackedArea":
				{
					"description": "Stack areas. Dependent of lineType property.",
					"type": "boolean"
				},
				"separateStacking":
				{
					"description": "Set to stack positive and negative values separately. Dependent of lineType property.",
					"default": true,
					"type": "boolean"
				},

				"gridLine":
				{
					"description": "Grid line settings",
					"$ref": "#/definitions/NxGridLine"
				},

				"suppressZero":
				{
					"description": "Removes zero values.Default is false.",
					"type": "boolean"
				},
				"suppressMissing":
				{
					"description": "Removes missing values.Default is false.",
					"type": "boolean"
				},
				"sortbyYValue":
				{
					"description": "To enable the sorting by ascending or descending order in the values of a measure.This property applies to pivot tables and stacked pivot tables.",
					"type": "integer",
					"enum": [-1,0,1]

				},
				"qInterColumnSortOrder":
				{
					"description": "Order the columns of the hypercube should be sorted. The index of the pseudo-dimension (if any) is -1.",
					"type": "array",
					"items":
					{
				  		"type": "integer"
					}
				},
				"columnOrder":
				{
					"description": "Index array that determines the column order",
					"type": "array",
					"items":
					{
						"type": "integer"
					}
				},
				"orientation":
				{
					"description": "Orientation settings. If vertical, the dimension axis can only be docked on bottom or top and measure axis on left or right",
					"enum": ["horizontal","vertical"],
					"type": "string"
				}

			},
			"additionalProperties": false,
			"required": 
			[
				"chartType",
				"chartId"
			]
		},
		"QColumnsContainer": 
		{
			"properties": 
			{
				"qDimensions": 
				{
					"description": "Dimensions",
					"type": "array",
					"items": 
					{
						"$ref": "#/definitions/NxDimension"
					}
				},
				"qMeasures": 
				{
					"description": "Dimensions",
					"type": "array",
					"items": 
					{
						"$ref": "#/definitions/NxMeasure"
					}
				}
			},
			"additionalProperties": false,
			"required": 
			[
				"qDimensions",
				"qMeasures"
			]
		},
		"NxDataPoint":
		{
			"properties":
			{
				"show":
				{
					"description": "Set to display data points on line series. Only used if there is at least one measure with type set to line.",
					"type": "boolean"
				},
				"showLabels":
				{
					"description": "Set to display labels on data points. (F.E. in linechart)",
					"type": "boolean"
				}

			},
			"additionalProperties": false,
			"required":
			[
				"show"
			]
		},
		"NxGridLine":
		{
			"properties":
			{
				"auto":
				{
					"description": "Set to use automatic grid line spacing.",
					"default": true,
					"type": "boolean"
				},
				"spacing":
				{
					"description": "Grid line spacing. Used only when auto is set to false",
					"type": "integer",
					"enum": [0,1,2,3]
				}
			},
			"additionalProperties": false,
			"required":
			[
				"auto"
			]
		},
		"NxLegend":
		{
			"properties":
			{
				"show":
				{
					"description": "Set to display the legend.",
					"default": true,
					"type": "boolean"
				},
				"showTitle":
				{
					"description": "Display the legend title",
					"default": true,
					"type": "boolean"
				},
				"dock":
				{
					"description": "Sets the legend position",
					"type": "string",
					"default": "auto",
					"enum": ["auto","right","left","top"]
				}

			},
			"additionalProperties": false,
			"required":
			[
				"show"
			]
		},

		"NxDimensionAxis":
		{
			"properties":
			{
				"show":
				{
					"description": "Set to display the labels and titles",
					"type": "string",
					"default": "all",
					"enum": ["all","labels","title","none"]
				},
				"label":
				{
					"description": "Set the label orientation",
					"type": "string",
					"default": "auto",
					"enum": ["auto","horizontal","tilted"]
				},
				"dock":
				{
					"description": "Sets the axis docking position",
					"type": "string",
					"default": "near",
					"enum": ["near","far"]
				}

			},
			"additionalProperties": false,
			"required":
			[
				"show"
			]
		},
		"NxMeasureAxis":
		{
			"properties":
			{
				"show":
				{
					"description": "Set to display the labels and titles",
					"type": "string",
					"default": "all",
					"enum": ["all","labels","title","none"]
				},
				"label":
				{
					"description": "Set the label orientation",
					"type": "string",
					"default": "auto",
					"enum": ["auto","horizontal","tilted"]
				},
				"dock":
				{
					"description": "Sets the axis docking position",
					"type": "string",
					"default": "near",
					"enum": ["near","far"]
				},
				"logarithmic":
				{
					"description": "Logarithmic scale.",
					"type": "boolean"
				},
				"autoMinMax":
				{
					"description": "Set to use automatic min/max for measure color.",
					"type": "boolean"
				},
				"minMax":
				{
					"description": "Set custom max/min",
					"type": "string",
					"default": "min",
					"enum": ["min","max","minMax"]
				},
				"spacing":
				{
					"description": "Measure axis spacing",
					"type": "number"
				},
				"min": {
					"description": "min ValueExpressionContainer",
					"type": "string"
				},
				"max": {
					"description": "max ValueExpressionContainer",
					"type": "string"
				}
			},
			"additionalProperties": false,
			"required":
			[
				"show"
			]
		},

		"NxBarGrouping":
		{
			"properties":
			{
				"grouping":
				{
					"description": "Bar grouping settings",
					"enum": ["grouped","stacked"],
					"type": "string"
				}
			},
			"additionalProperties": false,
			"required":
			[
				"grouping"
			]
		},

		"NxOptions":
		{
			"properties": 
			{
				"title": 
				{
					"type": "string"
				},
				"showTitles": 
				{
					"type": "boolean"
				},
				"subtitle": 
				{
					"type": "string"
				},
				"footnote": 
				{
					"type": "string"
				},
				"barGrouping":
				{
					"description": "Bar grouping settings",
					"$ref": "#/definitions/NxBarGrouping"
				},
				"donut":
				{
					"description": "Pie chart donut settings.",
					"$ref": "#/definitions/NxDonut"
				},
				"dataPoint":
				{
					"description": "Data point settings",
					"$ref": "#/definitions/NxDataPoint"
				},
				"legend":
				{
					"description": "Legend settings",
					"$ref": "#/definitions/NxLegend"
				},
				"dimensionAxis":
				{
					"description": "Legend settings",
					"$ref": "#/definitions/NxDimensionAxis"
				},
				"measureAxis":
				{
					"description": "Legend settings",
					"$ref": "#/definitions/NxMeasureAxis"
				},
				"color":
				{
					"description": "Color properties",
					"$ref": "#/definitions/NxColor"
				},
				"nullMode":
				{
					"description": "Sets the null value presentation",
					"enum": ["gap","connect","zero"],
					"type": "string"
				},
				"lineType":
				{
					"description": "Set the type of line chart. Can be one of:",
					"enum": ["line","area"],
					"type": "string"
				},
				"stackedArea":
				{
					"description": "Stack areas. Dependent of lineType property.",
					"type": "boolean"
				},
				"separateStacking":
				{
					"description": "Set to stack positive and negative values separately. Dependent of lineType property.",
					"default": true,
					"type": "boolean"
				},

				"gridLine":
				{
					"description": "Grid line settings",
					"$ref": "#/definitions/NxGridLine"
				},
				"refLine":
				{
					"description": "Reference line settings.",
					"$ref": "#/definitions/NxRefLineContainer"
				},

				"orientation":
				{
					"description": "Orientation settings. If vertical, the dimension axis can only be docked on bottom or top and measure axis on left or right",
					"enum": ["horizontal","vertical"],
					"type": "string"
				},

				"qHyperCubeDef":
				{
					"$ref": "#/definitions/QHyperCubeDef"
				}
			},
			"required":  ["title"],
			"additionalProperties": false
		},
		"QHyperCubeDef": 
		{
			"properties": 
			{
				"qDimensions": 
				{
					"description": "Dimensions",
					"type": "array",
					"items": 
					{
						"$ref": "#/definitions/NxDimension"
					}
				},
				"qSortbyYValue":
				{
					"description": "To enable the sorting by ascending or descending order in the values of a measure.This property applies to pivot tables and stacked pivot tables.",
					"type": "integer",
					"enum": [-1,0,1]

				},
				"qNoOfLeftDims":
				{
					"description": "Number of left dimensions. (meaningfull for pivot tables)",
					"type": "integer"
				},
				"qSuppressZero":
				{
					"description": "Removes zero values.Default is false.",
					"type": "boolean"
				},
				"qSuppressMissing":
				{
					"description": "Removes missing values.Default is false.",
					"type": "boolean"
				},
				"qInterColumnSortOrder":
				{
					"description": "Order the columns of the hypercube should be sorted. The index of the pseudo-dimension (if any) is -1.",
					"type": "array",
					"items":
					{
						"type": "integer"
					}
				},
				"columnOrder":
				{
					"description": "Index array that determines the column order",
					"type": "array",
					"items":
					{
						"type": "integer"
					}
				},

				"qAlwaysFullyExpanded":
				{
					"description": "If this property is set to true, the cells are always expanded. It implies that it is not possible to collapse any cells.",
					"type": "boolean"
				},
				"qCalcCond":
				{
					"description": "Specifies a calculation condition, which must be fulfilled for the hypercube to be (re)calculated.",
					"$ref": "#/definitions/NxValueExpr"
				},

				"qShowTotalsAbove":
				{
					"description": "If set to true, the total (if any) is shown on the first row.",
					"type": "boolean"
				},
				"qIndentMode":
				{
					"description": "This property applies for pivot tables and allows to change the layout of the table. An indentation is added to the beginning of each row.",
					"type": "boolean"
				},

				"qMeasures":
				{
					"description": "Dimensions",
					"type": "array",
					"items": 
					{
						"$ref": "#/definitions/NxMeasure"
					}
				},
				"qInitialDataFetch":
				{
					"description": "Initial data set",
					"type": "array",
					"items":
					{
						"$ref": "#/definitions/NxPage"
					}
				},

				"columnWidths":
				{
					"description": "Columns widths, -1 means autosize",
					"type": "array",
					"items": 
					{
						"type": "integer"
					}
				}
			},
			"additionalProperties": false,
			"required": 
			[
				"qDimensions",
				"qMeasures"
			]
		},
		"NxDimension": 
		{
			"properties": 
			{
				"type": 
				{
					"description": "Should be set to `dimension` simetimes",
					"type": "string"
				},
				"qLibraryId": 
				{
					"description": "Refers to a dimension stored in the library.",
					"type": "string"
				},
				"qDef": 
				{
					"description": "Refers to a dimension stored in the hypercube.",
					"$ref": "#/definitions/NxInlineDimensionDef"
				},
				"qNullSuppression": 
				{
					"description": "If set to true, no null values are returned.",
					"type": "boolean"
				},
				"autoSort":
				{
					"description": "Not documented",
					"type": "boolean"
				},
				"qShowAll":
				{
					"description": "If set to true, all dimension values are shown.",
					"type": "boolean"
				},
				"qOtherLabel": 
				{
					"description": "This property is used when some dimension limits are set.",
					"type": "string"
				},
				"qTotalLabel": 
				{
					"description": "If this property is set, the total of the calculated values is returned.",
					"type": "string"
				},
				"qOtherTotalSpec": 
				{
					"description": "Sets the dimension limits. Each dimension of a hypercube is configured separately. Just stub for now. Should add type in future",
					"type": "string"
				},
				"qCalcCond": 
				{
					"description": "Specifies a calculation condition, which must be fulfilled for the measure to be calculated",
					"$ref": "#/definitions/NxValueExpr"
				}
			},
			"required": 
			[
				"qLibraryId"
			],
			"additionalProperties": false
		},
		"NxInlineMeasureDef":
		{
			"properties": 
			{
				"qLabel": 
				{
					"description": "Name of the measure.",
					"type": "string"
				},
				"qDescription": 
				{
					"description": "Description of the measure",
					"type": "string"
				},
				"qDef": 
				{
					"description": "Definition of the expression in the measure.\n Example: Sum (OrderTotal)",
					"type": "string"
				},
				"qRelative": 
				{
					"description": "If set to true, percentage values are returned instead of absolute numbers",
					"type": "boolean"
				},
				"qBrutalSum": 
				{
					"description": "If set to true, the sum of rows total should be used rather than real expression total",
					"type": "boolean"
				},
				"qAggrFunc": 
				{
					"description": "Aggregate function",
					"enum": ["Sum","Min","Max","Avg"],
					"type": "string"
				},
				"qAccumulate": 
				{
					"description": "0 means no accumulation\n1 means full accumulation (each y-value accumulates all previous y-values of the expression)\n≥ 2 means accumulate as many steps as the qAccumulate value",
					"type": "integer"
				},
				"qReverseSort": 
				{
					"description": "If set to true, it inverts the sort criteria in the field",
					"type": "boolean"
				},
				"qActiveExpression": 
				{
					"description": "Index of the active expression in a cyclic measure. The indexing starts from 0.",
					"type": "integer"
				},
				"qExpressions": 
				{
					"description": "If set to true, it inverts the sort criteria in the field",
					"type": "array",
					"items": 
					{
						"type": "string"
					},
					"uniqueItems": true
				},
				"series":
				{
					"description": "Combo chart series settings for which axis to put the measure and how to visualize its data",
					"$ref": "#/definitions/NxMeasureSeries"
				},

				"qTags":
				{
					"type": "array",
					"items": 
					{
						"type": "string"
					},
					"uniqueItems": true
				}
			},
			"additionalProperties": false,
			"required": 
			[
				"qDef"
			]
		},
		"NxMeasureSeries":
		{
			"properties":
			{
				"type":
				{
					"description": "Set how to visualize the series",
					"enum": ["bar","line","marker"],
					"type": "string"
				},
				"axis":
				{
					"description": "",
					"type": "integer"
				},
				"marker":
				{
					"description": "",
					"type": "string"
				},
				"markerFill":
				{
					"description": "",
					"type": "boolean"
				}
			},
			"additionalProperties": false,
			"required":
			[
				"type"
			]
		},
		"NxPage":
		{
			"properties":
			{
				"qLeft":
				{
					"description": "Position from the left. Corresponds to the first column.",
					"type": "integer"
				},
				"qTop":
				{
					"description": "Position from the top. Corresponds to the first row.",
					"type": "integer"
				},
				"qWidth":
				{
					"description": "Number of columns in the page. The indexing of the columns may vary depending on whether the cells are expanded or not (parameter qAlwaysFullyExpanded in HyperCubeDef).",
					"type": "integer"
				},
				"qHeight":
				{
					"description": "Number of rows or elements in the page. The indexing of the rows may vary depending on whether the cells are expanded or not (parameter qAlwaysFullyExpanded in HyperCubeDef).",
					"type": "integer"
				}
			},
			"additionalProperties": false,
			"required":
			[
				"qWidth","qHeight"
			]
		},

		"NxMeasure": 
		{
			"properties": 
			{
				"type": 
				{
					"description": "Should be set to `measure` simetimes",
					"type": "string"
				},
				"qLibraryId": 
				{
					"description": "Refers to a measure stored in the library",
					"type": "string"
				},
				"qDef": 
				{
					"description": "Definition of the expression in the measure.\n Example: Sum (OrderTotal)",
					"$ref": "#/definitions/NxInlineMeasureDef"
				},
				"autoSort":
				{
					"description": "Not documented",
					"type": "boolean"
				},
				"qSortBy":
				{
					"description": "Defines the sort criteria",
					"$ref": "#/definitions/NxSortCriteria"
				},
				"qAttributeExpressions": 
				{
					"type": "array",
					"items": 
					{
						"$ref": "#/definitions/NxAttrExprDef"
					},
					"uniqueItems": true
				},
				"qCalcCond": 
				{
					"description": "Specifies a calculation condition, which must be fulfilled for the measure to be calculated",
					"$ref": "#/definitions/NxValueExpr"
				}
			},
			"additionalProperties": false,
			"required": 
			[
				"qDef"
			]
		},
		"NxAttrExprDef": 
		{
			"properties": 
			{
				"qExpression": 
				{
					"description": "Definition of the attribute expression. Example: Max(OrderID)",
					"type": "string"
				},
				"id":
				{
					"description": "Type of attribute expression",
					"enum": ["cellForegroundColor","cellBackgroundColor"],
					"type": "string"
				}

			},
			"additionalProperties": false,
			"required": 
			[
				"qExpression", "id"
			]
		},
		"NxInlineDimensionDef": 
		{
			"properties": 
			{
				"qFieldDefs": 
				{
					"description": "Array of field names.\n When creating a grouped dimension, more than one field name is defined",
					"type": "array",
					"items": 
					{
						"type": "string"
					},
					"uniqueItems": true
				},
				"qFieldLabels": 
				{
					"description": "Array of field labels.",
					"type": "array",
					"items": 
					{
						"type": "string"
					},
					"uniqueItems": true
				},
				"qGrouping": 
				{
					"description": "Used to define a cyclic group or drill-down group",
					"type": "string",
					"enum": 
					[
						"N",
						"H",
						"C"
					]
				},
				"qSortCriterias": 
				{
					"description": "Defines the sorting criteria in the field.",
					"type": "array",
					"items": 
					{
						"$ref": "#/definitions/NxSortCriteria"
					},
					"uniqueItems": true
				},
				"qNumberPresentations": 
				{
					"description": "Defines the format of the value.",
					"type": "array",
					"items": 
					{
						"$ref": "#/definitions/NxFieldAttributes"
					},
					"uniqueItems": true
				},
				"qReverseSort": 
				{
					"description": "If set to true, it inverts the sort criteria in the field.",
					"type": "boolean"
				},
				"qAttributeExpressions":
				{
					"type": "array",
					"items":
					{
						"$ref": "#/definitions/NxAttrExprDef"
					},
					"uniqueItems": true
				},
				"qActiveField":
				{
					"description": "ndex of the active field in a cyclic dimension",
					"type": "integer"
				}
			},
			"additionalProperties": false,
			"required": 
			[
				"qDef"
			]
		},
		"NxSortCriteria":
		{
			"properties": 
			{
				"qSortByExpression":
				{
					"description": "Sort by expression",
					"type": "integer",
					"enum":
					[
						-1,
						0,
						1
					]
				},
				"qExpression":
				{
					"description": "Sort by expression.",
					"$ref": "#/definitions/NxValueExpr"
				},

				"qSortByState": 
				{
					"description": "Sorts the field values according to their logical state (selected, optional, alternative or excluded)",
					"type": "integer",
					"enum": 
					[
						-1,
						0,
						1
					]
				},
				"qSortByFrequency": 
				{
					"description": "Sorts the field values by numeric value",
					"type": "integer",
					"enum": 
					[
						-1,
						0,
						1
					]
				},
				"qSortByNumeric": 
				{
					"description": "Sorts the field values according to their logical state (selected, optional, alternative or excluded)",
					"type": "integer",
					"enum": 
					[
						-1,
						0,
						1
					]
				},
				"qSortByAscii": 
				{
					"description": "Sorts the field by alphabetical order",
					"type": "integer",
					"enum": 
					[
						-1,
						0,
						1
					]
				},
				"qSortByLoadOrder": 
				{
					"description": "Sorts the field values by the initial load order",
					"type": "integer",
					"enum": 
					[
						-1,
						0,
						1
					]
				}
			},
			"additionalProperties": false,
			"required":
			[
				"qSortByNumeric"
			]
		},
		"NxFieldAttributes": 
		{
			"properties": 
			{
				"qType": 
				{
					"description": "Type of the field.Default is U",
					"type": "string",
					"default": "U",
					"enum": 
					[
						"U",
						"A",
						"I",
						"R",
						"F",
						"M",
						"D",
						"T",
						"TS",
						"IV"
					]
				},
				"qnDec": 
				{
					"description": "Number of decimals. Default is 10",
					"type": "integer",
					"enum": 
					[
						-1,
						0,
						1
					]
				},
				"qUseThou": 
				{
					"description": "Defines whether or not a thousands separator must be used",
					"type": "integer",
					"enum": 
					[
						0,
						1
					]
				},
				"qFmt": 
				{
					"description": "Defines the format pattern that applies to qText.Is used in connection to the type of the field",
					"type": "string"
				},
				"qDec": 
				{
					"description": "Defines the decimal separator.",
					"type": "string"
				},
				"qThou": 
				{
					"description": "Defines the thousand separator (if any).Is used if qUseThou is set to 1.",
					"type": "string"
				}
			},
			"additionalProperties": false
		},
		"NxDonut":
		{
			"properties":
			{
				"showAsDonut":
				{
					"description": "Set to present the pie chart as a donut.",
					"type": "boolean"
				}
			},
			"additionalProperties": false,
			"required":
			[
				"showAsDonut"
			]
		},


		"NxColor":
		{
			"properties":
			{
				"auto":
				{
					"description": "Set to use automatic coloring.",
					"type": "boolean"
				},
				"singleColor":
				{
					"description": "Set to use single color",
					"type": "integer",
					"default": 3
				},
				"mode":
				{
					"description": "Sets the coloring mode for the chart",
					"type": "string",
					"enum":
					[
						"primary",
						"byDimension",
						"byExpression",
						"byMeasure"
					],
					"default": "primary"
				},
				"persistent":
				{
					"description": "Set to use persistent colors on data points between selections",
					"type": "boolean"
				},
				"expressionIsColor":
				{
					"description": "Set to define whether the result of the expression is a valid CSS3 color.",
					"type": "boolean"
				},

				"expressionLabel":
				{
					"description": "Label to be defined on tool tips when using a coloring expression. Only used if expressionIsColor is set to false.",
					"type": "string"
				},
				"measureScheme":
				{
					"description": "Measure color scheme. Can be one of: sg (sequential, gradient), sc (sequential, classes), dg (diverging, gradient), dc (diverging, classes)",
					"type": "string",
					"enum":
					[
						"sg",
						"sc",
						"dg",
						"dc"
					],
					"default": "sg"
				},
				"reverseScheme":
				{
					"description": "Set to reverse the color scheme",
					"type": "boolean"
				},

				"dimensionScheme":
				{
					"description": "Dimension color scheme",
					"type": "string",
					"enum":
					[
						"12",
						"100"
					],
					"default": "12"
				},
				"dimensionId":
				{
					"description": "Id of the dimension to base the coloring on. Should use the CID on the dimension.",
					"type": "string"
				},
				"autoMinMax":
				{
					"description": "Set to use automatic min/max for measure color",
					"type": "boolean",
					"default": true
				},
				"measureMin":
				{
					"description": "ValueExpressionContainer",
					"type": "string"
				},
				"measureMax":
				{
					"description": "ValueExpressionContainer",
					"type": "string"
				}
			},
			"additionalProperties": false,
			"required":
			[
				"auto"
			]

		},
		"NxRefLineContainer":
		{
			"properties":
			{
				"refLines":
				{
					"type": "array",
					"items":
					{
						"$ref": "#/definitions/NxRefLine"
					}
				}
			},
			"additionalProperties": false,
			"required":
			[
				"refLines"
			]

		},

		"NxRefLine":
		{
			"properties":
			{
				"show":
				{
					"description": "Set to true to display this reference line.",
					"type": "boolean"
				},
				"color":
				{
					"description": "Color",
					"type": "integer",
					"default": 3
				},
				"label":
				{
					"description": "Reference line label.",
					"type": "string"
				},
				"refLineExpr":
				{
					"description": "Expression",
					"$ref": "#/definitions/NxRefLineExpr"
				}

			},
			"additionalProperties": false,
			"required":
			[
				"refLineExpr"
			]

		},
		"NxRefLineExpr":
		{
			"properties":
			{
				"value":
				{
					"description": "Expression for the value used in the visualization",
					"type": "number"
				},
				"label":
				{
					"description": "Expression for the value used in the visualization",
					"type": "string"
				}

			},
			"additionalProperties": false,
			"required":
			[
				"value"
			]
		},

		"NxValueExpr":
		{
			"properties": 
			{
				"qv": 
				{
					"description": "Expression returning number value",
					"type": "string"
				}
			},
			"additionalProperties": false,
			"required":
			[
				"qv"
			]
		},
		"NxStringExpr":
		{
			"properties":
			{
				"qv":
				{
					"description": "Expression returning string value",
					"type": "string"
				}
			},
			"additionalProperties": false,
			"required":
			[
				"qv"
			]
		}

	}
}