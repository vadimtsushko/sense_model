// Generated by Dogma Dart. DO NOT MODIFY!

library sense_model.src.convert.nx_options_convert;

//---------------------------------------------------------------------
// Standard libraries
//---------------------------------------------------------------------

import 'dart:convert';

//---------------------------------------------------------------------
// Imports
//---------------------------------------------------------------------

import 'package:dogma_convert/convert.dart';
import 'package:sense_model/models.dart';
import 'nx_bar_grouping_convert.dart';
import 'nx_data_point_convert.dart';
import 'nx_donut_convert.dart';
import 'q_hyper_cube_def_convert.dart';

//---------------------------------------------------------------------
// Library contents
//---------------------------------------------------------------------

/// A [ModelDecoder] for [NxOptions].
class NxOptionsDecoder extends Converter<Map, NxOptions>
    implements ModelDecoder<NxOptions> {
  final Converter<Map, NxBarGrouping> _nxBarGroupingDecoder;
  final Converter<Map, NxDonut> _nxDonutDecoder;
  final Converter<Map, NxDataPoint> _nxDataPointDecoder;
  final Converter<Map, QHyperCubeDef> _qHyperCubeDefDecoder;
  NxOptionsDecoder()
      : _nxBarGroupingDecoder = new NxBarGroupingDecoder(),
        _nxDonutDecoder = new NxDonutDecoder(),
        _nxDataPointDecoder = new NxDataPointDecoder(),
        _qHyperCubeDefDecoder = new QHyperCubeDefDecoder();
  NxOptionsDecoder.using(this._nxBarGroupingDecoder, this._nxDonutDecoder,
      this._nxDataPointDecoder, this._qHyperCubeDefDecoder);
  @override
  NxOptions create() => new NxOptions();
  @override
  NxOptions convert(Map input, [NxOptions model]) {
    model ??= create();

    model.title = input['title'];
    model.showTitles = input['showTitles'];
    model.subtitle = input['subtitle'];
    model.footnote = input['footnote'];
    var barGrouping = input['barGrouping'];
    if (barGrouping != null) {
      model.barGrouping = _nxBarGroupingDecoder.convert(barGrouping);
    }
    var donut = input['donut'];
    if (donut != null) {
      model.donut = _nxDonutDecoder.convert(donut);
    }
    var dataPoint = input['dataPoint'];
    if (dataPoint != null) {
      model.dataPoint = _nxDataPointDecoder.convert(dataPoint);
    }
    model.nullMode = input['nullMode'];
    model.orientation = input['orientation'];
    var qHyperCubeDef = input['qHyperCubeDef'];
    if (qHyperCubeDef != null) {
      model.qHyperCubeDef = _qHyperCubeDefDecoder.convert(qHyperCubeDef);
    }

    return model;
  }
}

/// A [ModelEncoder] for [NxOptions].
class NxOptionsEncoder extends Converter<NxOptions, Map>
    implements ModelEncoder<NxOptions> {
  final Converter<NxBarGrouping, Map> _nxBarGroupingEncoder;
  final Converter<NxDonut, Map> _nxDonutEncoder;
  final Converter<NxDataPoint, Map> _nxDataPointEncoder;
  final Converter<QHyperCubeDef, Map> _qHyperCubeDefEncoder;
  NxOptionsEncoder()
      : _nxBarGroupingEncoder = new NxBarGroupingEncoder(),
        _nxDonutEncoder = new NxDonutEncoder(),
        _nxDataPointEncoder = new NxDataPointEncoder(),
        _qHyperCubeDefEncoder = new QHyperCubeDefEncoder();
  NxOptionsEncoder.using(this._nxBarGroupingEncoder, this._nxDonutEncoder,
      this._nxDataPointEncoder, this._qHyperCubeDefEncoder);
  @override
  Map convert(NxOptions input) {
    var model = {};

    model['title'] = input.title;
    var showTitles = input.showTitles;
    if (showTitles != null) {
      model['showTitles'] = showTitles;
    }
    var subtitle = input.subtitle;
    if (subtitle != null) {
      model['subtitle'] = subtitle;
    }
    var footnote = input.footnote;
    if (footnote != null) {
      model['footnote'] = footnote;
    }
    var barGrouping = input.barGrouping;
    if (barGrouping != null) {
      model['barGrouping'] = _nxBarGroupingEncoder.convert(barGrouping);
    }
    var donut = input.donut;
    if (donut != null) {
      model['donut'] = _nxDonutEncoder.convert(donut);
    }
    var dataPoint = input.dataPoint;
    if (dataPoint != null) {
      model['dataPoint'] = _nxDataPointEncoder.convert(dataPoint);
    }
    var nullMode = input.nullMode;
    if (nullMode != null) {
      model['nullMode'] = nullMode;
    }
    var orientation = input.orientation;
    if (orientation != null) {
      model['orientation'] = orientation;
    }
    var qHyperCubeDef = input.qHyperCubeDef;
    if (qHyperCubeDef != null) {
      model['qHyperCubeDef'] = _qHyperCubeDefEncoder.convert(qHyperCubeDef);
    }

    return model;
  }
}
