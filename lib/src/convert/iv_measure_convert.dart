// Generated by Dogma Dart. DO NOT MODIFY!

library sense_model.src.convert.iv_measure_convert;

//---------------------------------------------------------------------
// Standard libraries
//---------------------------------------------------------------------

import 'dart:convert';

//---------------------------------------------------------------------
// Imports
//---------------------------------------------------------------------

import 'package:dogma_convert/convert.dart';
import 'package:sense_model/models.dart';
import 'iv_filter_param_convert.dart';

//---------------------------------------------------------------------
// Library contents
//---------------------------------------------------------------------

/// A [ModelDecoder] for [IvMeasure].
class IvMeasureDecoder extends Converter<Map, IvMeasure>
    implements ModelDecoder<IvMeasure> {
  final Converter<Map, IvFilterParam> _ivFilterParamDecoder;
  IvMeasureDecoder() : _ivFilterParamDecoder = new IvFilterParamDecoder();
  IvMeasureDecoder.using(this._ivFilterParamDecoder);
  @override
  IvMeasure create() => new IvMeasure();
  @override
  IvMeasure convert(Map input, [IvMeasure model]) {
    model ??= create();

    model.isStatic = input['isStatic'];
    model.key = input['key'];
    model.param = input['param'];
    model.conditional = input['conditional'];
    model.visible = input['visible'];
    var filters = input['filters'];
    if (filters != null) {
      var filtersTemp0 = <IvFilterParam>[];
      for (var filtersValue0 in filters) {
        filtersTemp0.add(_ivFilterParamDecoder.convert(filtersValue0));
      }
      model.filters = filtersTemp0;
    }

    return model;
  }
}

/// A [ModelEncoder] for [IvMeasure].
class IvMeasureEncoder extends Converter<IvMeasure, Map>
    implements ModelEncoder<IvMeasure> {
  final Converter<IvFilterParam, Map> _ivFilterParamEncoder;
  IvMeasureEncoder() : _ivFilterParamEncoder = new IvFilterParamEncoder();
  IvMeasureEncoder.using(this._ivFilterParamEncoder);
  @override
  Map convert(IvMeasure input) {
    var model = {};

    model['isStatic'] = input.isStatic;
    model['key'] = input.key;
    var param = input.param;
    if (param != null) {
      model['param'] = param;
    }
    var conditional = input.conditional;
    if (conditional != null) {
      model['conditional'] = conditional;
    }
    var visible = input.visible;
    if (visible != null) {
      model['visible'] = visible;
    }
    var filters = input.filters;
    if (filters != null) {
      var filtersTemp0 = [];
      for (var filtersValue0 in filters) {
        filtersTemp0.add(_ivFilterParamEncoder.convert(filtersValue0));
      }
      model['filters'] = filtersTemp0;
    }

    return model;
  }
}
