// Generated by Dogma Dart. DO NOT MODIFY!

library sense_model.src.convert.nx_generic_dimension_properties_convert;

//---------------------------------------------------------------------
// Standard libraries
//---------------------------------------------------------------------

import 'dart:convert';

//---------------------------------------------------------------------
// Imports
//---------------------------------------------------------------------

import 'package:dogma_convert/convert.dart';
import 'package:sense_model/models.dart';
import 'nx_value_expr_convert.dart';

//---------------------------------------------------------------------
// Library contents
//---------------------------------------------------------------------

/// A [ModelDecoder] for [NxGenericDimensionProperties].
class NxGenericDimensionPropertiesDecoder
    extends Converter<Map, NxGenericDimensionProperties>
    implements ModelDecoder<NxGenericDimensionProperties> {
  final Converter<Map, NxValueExpr> _nxValueExprDecoder;
  NxGenericDimensionPropertiesDecoder()
      : _nxValueExprDecoder = new NxValueExprDecoder();
  NxGenericDimensionPropertiesDecoder.using(this._nxValueExprDecoder);
  @override
  NxGenericDimensionProperties create() => new NxGenericDimensionProperties();
  @override
  NxGenericDimensionProperties convert(Map input,
      [NxGenericDimensionProperties model]) {
    model ??= create();

    var qInfo = input['qInfo'];
    if (qInfo != null) {
      model.qInfo = _nxValueExprDecoder.convert(qInfo);
    }
    model.qFieldLabels = input['qFieldLabels'];
    model.qGrouping = input['qGrouping'];
    return model;
  }
}

/// A [ModelEncoder] for [NxGenericDimensionProperties].
class NxGenericDimensionPropertiesEncoder
    extends Converter<NxGenericDimensionProperties, Map>
    implements ModelEncoder<NxGenericDimensionProperties> {
  final Converter<NxValueExpr, Map> _nxValueExprEncoder;
  NxGenericDimensionPropertiesEncoder()
      : _nxValueExprEncoder = new NxValueExprEncoder();
  NxGenericDimensionPropertiesEncoder.using(this._nxValueExprEncoder);
  @override
  Map convert(NxGenericDimensionProperties input) {
    var model = {};

    var qInfo = input.qInfo;
    if (qInfo != null) {
      model['qInfo'] = _nxValueExprEncoder.convert(qInfo);
    }
    var qFieldLabels = input.qFieldLabels;
    if (qFieldLabels != null) {
      model['qFieldLabels'] = qFieldLabels;
    }
    var qGrouping = input.qGrouping;
    if (qGrouping != null) {
      model['qGrouping'] = qGrouping;
    }

    return model;
  }
}
