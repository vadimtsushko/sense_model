// Generated by Dogma Dart. DO NOT MODIFY!
// 2017-01-17 11:59:03.825591

library sense_model.src.convert.selection_table_data_convert;

//---------------------------------------------------------------------
// Standard libraries
//---------------------------------------------------------------------

import 'dart:convert';

//---------------------------------------------------------------------
// Imports
//---------------------------------------------------------------------

import 'package:dogma_convert/convert.dart';
import 'package:sense_model/models.dart';
import 'selection_table_item_convert.dart';

//---------------------------------------------------------------------
// Library contents
//---------------------------------------------------------------------

/// A [ModelDecoder] for [SelectionTableData].
class SelectionTableDataDecoder extends Converter<Map, SelectionTableData>
    implements ModelDecoder<SelectionTableData> {
  final Converter<Map, SelectionTableItem> _selectionTableItemDecoder;
  SelectionTableDataDecoder()
      : _selectionTableItemDecoder = new SelectionTableItemDecoder();
  SelectionTableDataDecoder.using(this._selectionTableItemDecoder);
  @override
  SelectionTableData create() => new SelectionTableData();
  @override
  SelectionTableData convert(Map input, [SelectionTableData model]) {
    model ??= create();

    model.tableId = input['tableId'];
    model.tableType = input['tableType'];
    model.parentTableId = input['parentTableId'];
    model.transformationType = input['transformationType'];
    model.multiple = input['multiple'];
    model.calendarTable = input['calendarTable'];
    model.selectedValue = input['selectedValue'];
    model.selectedIndex = input['selectedIndex'];
    model.keys = input['keys'];
    var tableItems = input['tableItems'];
    if (tableItems != null) {
      var tableItemsTemp0 = <SelectionTableItem>[];
      for (var tableItemsValue0 in tableItems) {
        tableItemsTemp0
            .add(_selectionTableItemDecoder.convert(tableItemsValue0));
      }
      model.tableItems = tableItemsTemp0;
    }

    return model;
  }
}

/// A [ModelEncoder] for [SelectionTableData].
class SelectionTableDataEncoder extends Converter<SelectionTableData, Map>
    implements ModelEncoder<SelectionTableData> {
  final Converter<SelectionTableItem, Map> _selectionTableItemEncoder;
  SelectionTableDataEncoder()
      : _selectionTableItemEncoder = new SelectionTableItemEncoder();
  SelectionTableDataEncoder.using(this._selectionTableItemEncoder);
  @override
  Map convert(SelectionTableData input) {
    var model = {};

    model['tableId'] = input.tableId;
    model['tableType'] = input.tableType;
    var parentTableId = input.parentTableId;
    if (parentTableId != null) {
      model['parentTableId'] = parentTableId;
    }
    var transformationType = input.transformationType;
    if (transformationType != null) {
      model['transformationType'] = transformationType;
    }
    var multiple = input.multiple;
    if (multiple != null) {
      model['multiple'] = multiple;
    }
    var calendarTable = input.calendarTable;
    if (calendarTable != null) {
      model['calendarTable'] = calendarTable;
    }
    var selectedValue = input.selectedValue;
    if (selectedValue != null) {
      model['selectedValue'] = selectedValue;
    }
    var selectedIndex = input.selectedIndex;
    if (selectedIndex != null) {
      model['selectedIndex'] = selectedIndex;
    }
    model['keys'] = input.keys;
    var tableItems = input.tableItems;
    if (tableItems != null) {
      var tableItemsTemp0 = [];
      for (var tableItemsValue0 in tableItems) {
        tableItemsTemp0
            .add(_selectionTableItemEncoder.convert(tableItemsValue0));
      }
      model['tableItems'] = tableItemsTemp0;
    }

    return model;
  }
}
