// Generated by Dogma Dart. DO NOT MODIFY!

library sense_model.src.convert.nx_dimension_1_convert;

//---------------------------------------------------------------------
// Standard libraries
//---------------------------------------------------------------------

import 'dart:convert';

//---------------------------------------------------------------------
// Imports
//---------------------------------------------------------------------

import 'package:dogma_convert/convert.dart';
import 'package:sense_model/models.dart';
import 'nx_inline_dimension_def_convert.dart';
import 'nx_value_expr_convert.dart';

//---------------------------------------------------------------------
// Library contents
//---------------------------------------------------------------------

/// A [ModelDecoder] for [NxDimension1].
class NxDimension1Decoder extends Converter<Map, NxDimension1>
    implements ModelDecoder<NxDimension1> {
  final Converter<Map, NxInlineDimensionDef> _nxInlineDimensionDefDecoder;
  final Converter<Map, NxValueExpr> _nxValueExprDecoder;
  NxDimension1Decoder()
      : _nxInlineDimensionDefDecoder = new NxInlineDimensionDefDecoder(),
        _nxValueExprDecoder = new NxValueExprDecoder();
  NxDimension1Decoder.using(
      this._nxInlineDimensionDefDecoder, this._nxValueExprDecoder);
  @override
  NxDimension1 create() => new NxDimension1();
  @override
  NxDimension1 convert(Map input, [NxDimension1 model]) {
    model ??= create();

    model.type = input['type'];
    model.qLibraryId = input['qLibraryId'];
    var qDef = input['qDef'];
    if (qDef != null) {
      model.qDef = _nxInlineDimensionDefDecoder.convert(qDef);
    }
    model.qNullSuppression = input['qNullSuppression'];
    model.qShowAll = input['qShowAll'];
    model.qOtherLabel = input['qOtherLabel'];
    model.qTotalLabel = input['qTotalLabel'];
    model.qOtherTotalSpec = input['qOtherTotalSpec'];
    var qCalcCond = input['qCalcCond'];
    if (qCalcCond != null) {
      model.qCalcCond = _nxValueExprDecoder.convert(qCalcCond);
    }

    return model;
  }
}

/// A [ModelEncoder] for [NxDimension1].
class NxDimension1Encoder extends Converter<NxDimension1, Map>
    implements ModelEncoder<NxDimension1> {
  final Converter<NxInlineDimensionDef, Map> _nxInlineDimensionDefEncoder;
  final Converter<NxValueExpr, Map> _nxValueExprEncoder;
  NxDimension1Encoder()
      : _nxInlineDimensionDefEncoder = new NxInlineDimensionDefEncoder(),
        _nxValueExprEncoder = new NxValueExprEncoder();
  NxDimension1Encoder.using(
      this._nxInlineDimensionDefEncoder, this._nxValueExprEncoder);
  @override
  Map convert(NxDimension1 input) {
    var model = {};

    var type = input.type;
    if (type != null) {
      model['type'] = type;
    }
    var qLibraryId = input.qLibraryId;
    if (qLibraryId != null) {
      model['qLibraryId'] = qLibraryId;
    }
    var qDef = input.qDef;
    if (qDef != null) {
      model['qDef'] = _nxInlineDimensionDefEncoder.convert(qDef);
    }
    var qNullSuppression = input.qNullSuppression;
    if (qNullSuppression != null) {
      model['qNullSuppression'] = qNullSuppression;
    }
    var qShowAll = input.qShowAll;
    if (qShowAll != null) {
      model['qShowAll'] = qShowAll;
    }
    var qOtherLabel = input.qOtherLabel;
    if (qOtherLabel != null) {
      model['qOtherLabel'] = qOtherLabel;
    }
    var qTotalLabel = input.qTotalLabel;
    if (qTotalLabel != null) {
      model['qTotalLabel'] = qTotalLabel;
    }
    var qOtherTotalSpec = input.qOtherTotalSpec;
    if (qOtherTotalSpec != null) {
      model['qOtherTotalSpec'] = qOtherTotalSpec;
    }
    var qCalcCond = input.qCalcCond;
    if (qCalcCond != null) {
      model['qCalcCond'] = _nxValueExprEncoder.convert(qCalcCond);
    }

    return model;
  }
}
