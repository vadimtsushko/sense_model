// Generated by Dogma Dart. DO NOT MODIFY!

library sense_model.src.convert.nx_options_convert;

//---------------------------------------------------------------------
// Standard libraries
//---------------------------------------------------------------------

import 'dart:convert';

//---------------------------------------------------------------------
// Imports
//---------------------------------------------------------------------

import 'package:dogma_convert/convert.dart';
import 'package:sense_model/models.dart';
import 'q_hyper_cube_def_convert.dart';

//---------------------------------------------------------------------
// Library contents
//---------------------------------------------------------------------

/// A [ModelDecoder] for [NxOptions].
class NxOptionsDecoder extends Converter<Map, NxOptions>
    implements ModelDecoder<NxOptions> {
  final Converter<Map, QHyperCubeDef> _qHyperCubeDefDecoder;
  NxOptionsDecoder() : _qHyperCubeDefDecoder = new QHyperCubeDefDecoder();
  NxOptionsDecoder.using(this._qHyperCubeDefDecoder);
  @override
  NxOptions create() => new NxOptions();
  @override
  NxOptions convert(Map input, [NxOptions model]) {
    model ??= create();

    model.title = input['title'];
    model.showTitles = input['showTitles'];
    model.subtitle = input['subtitle'];
    model.footnote = input['footnote'];
    model.qHyperCubeDef = _qHyperCubeDefDecoder.convert(input['qHyperCubeDef']);

    return model;
  }
}

/// A [ModelEncoder] for [NxOptions].
class NxOptionsEncoder extends Converter<NxOptions, Map>
    implements ModelEncoder<NxOptions> {
  final Converter<QHyperCubeDef, Map> _qHyperCubeDefEncoder;
  NxOptionsEncoder() : _qHyperCubeDefEncoder = new QHyperCubeDefEncoder();
  NxOptionsEncoder.using(this._qHyperCubeDefEncoder);
  @override
  Map convert(NxOptions input) {
    var model = {};

    model['title'] = input.title;
    model['showTitles'] = input.showTitles;
    model['subtitle'] = input.subtitle;
    model['footnote'] = input.footnote;
    model['qHyperCubeDef'] = _qHyperCubeDefEncoder.convert(input.qHyperCubeDef);

    return model;
  }
}
