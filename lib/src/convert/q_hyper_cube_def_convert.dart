// Generated by Dogma Dart. DO NOT MODIFY!

library sense_model.src.convert.q_hyper_cube_def_convert;

//---------------------------------------------------------------------
// Standard libraries
//---------------------------------------------------------------------

import 'dart:convert';

//---------------------------------------------------------------------
// Imports
//---------------------------------------------------------------------

import 'package:dogma_convert/convert.dart';
import 'package:sense_model/models.dart';
import 'nx_dimension_convert.dart';
import 'nx_measure_convert.dart';

//---------------------------------------------------------------------
// Library contents
//---------------------------------------------------------------------

/// A [ModelDecoder] for [QHyperCubeDef].
class QHyperCubeDefDecoder extends Converter<Map, QHyperCubeDef>
    implements ModelDecoder<QHyperCubeDef> {
  final Converter<Map, NxDimension> _nxDimensionDecoder;
  final Converter<Map, NxMeasure> _nxMeasureDecoder;
  QHyperCubeDefDecoder()
      : _nxDimensionDecoder = new NxDimensionDecoder(),
        _nxMeasureDecoder = new NxMeasureDecoder();
  QHyperCubeDefDecoder.using(this._nxDimensionDecoder, this._nxMeasureDecoder);
  @override
  QHyperCubeDef create() => new QHyperCubeDef();
  @override
  QHyperCubeDef convert(Map input, [QHyperCubeDef model]) {
    model ??= create();

    var qDimensionsTemp0 = <NxDimension>[];
    for (var qDimensionsValue0 in input['qDimensions']) {
      qDimensionsTemp0.add(_nxDimensionDecoder.convert(qDimensionsValue0));
    }
    model.qDimensions = qDimensionsTemp0;
    var qMeasuresTemp0 = <NxMeasure>[];
    for (var qMeasuresValue0 in input['qMeasures']) {
      qMeasuresTemp0.add(_nxMeasureDecoder.convert(qMeasuresValue0));
    }
    model.qMeasures = qMeasuresTemp0;
    model.columnWidths = input['columnWidths'] as List<int>;
    model.columnOrder = input['columnOrder'] as List<int>;
    return model;
  }
}

/// A [ModelEncoder] for [QHyperCubeDef].
class QHyperCubeDefEncoder extends Converter<QHyperCubeDef, Map>
    implements ModelEncoder<QHyperCubeDef> {
  final Converter<NxDimension, Map> _nxDimensionEncoder;
  final Converter<NxMeasure, Map> _nxMeasureEncoder;
  QHyperCubeDefEncoder()
      : _nxDimensionEncoder = new NxDimensionEncoder(),
        _nxMeasureEncoder = new NxMeasureEncoder();
  QHyperCubeDefEncoder.using(this._nxDimensionEncoder, this._nxMeasureEncoder);
  @override
  Map convert(QHyperCubeDef input) {
    var model = {};

    var qDimensionsTemp0 = [];
    for (var qDimensionsValue0 in input.qDimensions) {
      qDimensionsTemp0.add(_nxDimensionEncoder.convert(qDimensionsValue0));
    }
    model['qDimensions'] = qDimensionsTemp0;
    var qMeasuresTemp0 = [];
    for (var qMeasuresValue0 in input.qMeasures) {
      qMeasuresTemp0.add(_nxMeasureEncoder.convert(qMeasuresValue0));
    }
    model['qMeasures'] = qMeasuresTemp0;
    var columnWidths = input.columnWidths;
    if (columnWidths != null) {
      model['columnWidths'] = columnWidths;
    }
    var columnOrder = input.columnOrder;
    if (columnOrder != null) {
      model['columnOrder'] = columnOrder;
    }

    return model;
  }
}
