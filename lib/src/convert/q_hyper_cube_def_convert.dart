// Generated by Dogma Dart. DO NOT MODIFY!

library sense_model.src.convert.q_hyper_cube_def_convert;

//---------------------------------------------------------------------
// Standard libraries
//---------------------------------------------------------------------

import 'dart:convert';

//---------------------------------------------------------------------
// Imports
//---------------------------------------------------------------------

import 'package:dogma_convert/convert.dart';
import 'package:sense_model/models.dart';
import 'nx_dimension_convert.dart';
import 'nx_measure_convert.dart';
import 'nx_page_convert.dart';
import 'nx_value_expr_convert.dart';

//---------------------------------------------------------------------
// Library contents
//---------------------------------------------------------------------

/// A [ModelDecoder] for [QHyperCubeDef].
class QHyperCubeDefDecoder extends Converter<Map, QHyperCubeDef>
    implements ModelDecoder<QHyperCubeDef> {
  final Converter<Map, NxDimension> _nxDimensionDecoder;
  final Converter<Map, NxValueExpr> _nxValueExprDecoder;
  final Converter<Map, NxMeasure> _nxMeasureDecoder;
  final Converter<Map, NxPage> _nxPageDecoder;
  QHyperCubeDefDecoder()
      : _nxDimensionDecoder = new NxDimensionDecoder(),
        _nxValueExprDecoder = new NxValueExprDecoder(),
        _nxMeasureDecoder = new NxMeasureDecoder(),
        _nxPageDecoder = new NxPageDecoder();
  QHyperCubeDefDecoder.using(this._nxDimensionDecoder, this._nxValueExprDecoder,
      this._nxMeasureDecoder, this._nxPageDecoder);
  @override
  QHyperCubeDef create() => new QHyperCubeDef();
  @override
  QHyperCubeDef convert(Map input, [QHyperCubeDef model]) {
    model ??= create();

    var qDimensionsTemp0 = <NxDimension>[];
    for (var qDimensionsValue0 in input['qDimensions']) {
      qDimensionsTemp0.add(_nxDimensionDecoder.convert(qDimensionsValue0));
    }
    model.qDimensions = qDimensionsTemp0;
    model.qSortbyYValue = input['qSortbyYValue'];
    model.qNoOfLeftDims = input['qNoOfLeftDims'];
    model.qSuppressZero = input['qSuppressZero'];
    model.qSuppressMissing = input['qSuppressMissing'];
    model.qInterColumnSortOrder = input['qInterColumnSortOrder'] as List<int>;
    model.columnOrder = input['columnOrder'] as List<int>;
    model.qAlwaysFullyExpanded = input['qAlwaysFullyExpanded'];
    var qCalcCond = input['qCalcCond'];
    if (qCalcCond != null) {
      model.qCalcCond = _nxValueExprDecoder.convert(qCalcCond);
    }
    model.qShowTotalsAbove = input['qShowTotalsAbove'];
    model.qIndentMode = input['qIndentMode'];
    var qMeasuresTemp0 = <NxMeasure>[];
    for (var qMeasuresValue0 in input['qMeasures']) {
      qMeasuresTemp0.add(_nxMeasureDecoder.convert(qMeasuresValue0));
    }
    model.qMeasures = qMeasuresTemp0;
    var qInitialDataFetch = input['qInitialDataFetch'];
    if (qInitialDataFetch != null) {
      var qInitialDataFetchTemp0 = <NxPage>[];
      for (var qInitialDataFetchValue0 in qInitialDataFetch) {
        qInitialDataFetchTemp0
            .add(_nxPageDecoder.convert(qInitialDataFetchValue0));
      }
      model.qInitialDataFetch = qInitialDataFetchTemp0;
    }
    model.columnWidths = input['columnWidths'] as List<int>;
    return model;
  }
}

/// A [ModelEncoder] for [QHyperCubeDef].
class QHyperCubeDefEncoder extends Converter<QHyperCubeDef, Map>
    implements ModelEncoder<QHyperCubeDef> {
  final Converter<NxDimension, Map> _nxDimensionEncoder;
  final Converter<NxValueExpr, Map> _nxValueExprEncoder;
  final Converter<NxMeasure, Map> _nxMeasureEncoder;
  final Converter<NxPage, Map> _nxPageEncoder;
  QHyperCubeDefEncoder()
      : _nxDimensionEncoder = new NxDimensionEncoder(),
        _nxValueExprEncoder = new NxValueExprEncoder(),
        _nxMeasureEncoder = new NxMeasureEncoder(),
        _nxPageEncoder = new NxPageEncoder();
  QHyperCubeDefEncoder.using(this._nxDimensionEncoder, this._nxValueExprEncoder,
      this._nxMeasureEncoder, this._nxPageEncoder);
  @override
  Map convert(QHyperCubeDef input) {
    var model = {};

    var qDimensionsTemp0 = [];
    for (var qDimensionsValue0 in input.qDimensions) {
      qDimensionsTemp0.add(_nxDimensionEncoder.convert(qDimensionsValue0));
    }
    model['qDimensions'] = qDimensionsTemp0;
    var qSortbyYValue = input.qSortbyYValue;
    if (qSortbyYValue != null) {
      model['qSortbyYValue'] = qSortbyYValue;
    }
    var qNoOfLeftDims = input.qNoOfLeftDims;
    if (qNoOfLeftDims != null) {
      model['qNoOfLeftDims'] = qNoOfLeftDims;
    }
    var qSuppressZero = input.qSuppressZero;
    if (qSuppressZero != null) {
      model['qSuppressZero'] = qSuppressZero;
    }
    var qSuppressMissing = input.qSuppressMissing;
    if (qSuppressMissing != null) {
      model['qSuppressMissing'] = qSuppressMissing;
    }
    var qInterColumnSortOrder = input.qInterColumnSortOrder;
    if (qInterColumnSortOrder != null) {
      model['qInterColumnSortOrder'] = qInterColumnSortOrder;
    }
    var columnOrder = input.columnOrder;
    if (columnOrder != null) {
      model['columnOrder'] = columnOrder;
    }
    var qAlwaysFullyExpanded = input.qAlwaysFullyExpanded;
    if (qAlwaysFullyExpanded != null) {
      model['qAlwaysFullyExpanded'] = qAlwaysFullyExpanded;
    }
    var qCalcCond = input.qCalcCond;
    if (qCalcCond != null) {
      model['qCalcCond'] = _nxValueExprEncoder.convert(qCalcCond);
    }
    var qShowTotalsAbove = input.qShowTotalsAbove;
    if (qShowTotalsAbove != null) {
      model['qShowTotalsAbove'] = qShowTotalsAbove;
    }
    var qIndentMode = input.qIndentMode;
    if (qIndentMode != null) {
      model['qIndentMode'] = qIndentMode;
    }
    var qMeasuresTemp0 = [];
    for (var qMeasuresValue0 in input.qMeasures) {
      qMeasuresTemp0.add(_nxMeasureEncoder.convert(qMeasuresValue0));
    }
    model['qMeasures'] = qMeasuresTemp0;
    var qInitialDataFetch = input.qInitialDataFetch;
    if (qInitialDataFetch != null) {
      var qInitialDataFetchTemp0 = [];
      for (var qInitialDataFetchValue0 in qInitialDataFetch) {
        qInitialDataFetchTemp0
            .add(_nxPageEncoder.convert(qInitialDataFetchValue0));
      }
      model['qInitialDataFetch'] = qInitialDataFetchTemp0;
    }
    var columnWidths = input.columnWidths;
    if (columnWidths != null) {
      model['columnWidths'] = columnWidths;
    }

    return model;
  }
}
