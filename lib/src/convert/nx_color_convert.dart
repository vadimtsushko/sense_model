// Generated by Dogma Dart. DO NOT MODIFY!
// 2016-08-18 16:04:21.241340

library sense_model.src.convert.nx_color_convert;

//---------------------------------------------------------------------
// Standard libraries
//---------------------------------------------------------------------

import 'dart:convert';

//---------------------------------------------------------------------
// Imports
//---------------------------------------------------------------------

import 'package:dogma_convert/convert.dart';
import 'package:sense_model/models.dart';

//---------------------------------------------------------------------
// Library contents
//---------------------------------------------------------------------

/// A [ModelDecoder] for [NxColor].
class NxColorDecoder extends Converter<Map, NxColor>
    implements ModelDecoder<NxColor> {
  @override
  NxColor create() => new NxColor();
  @override
  NxColor convert(Map input, [NxColor model]) {
    model ??= create();

    model.auto = input['auto'];
    model.singleColor = input['singleColor'];
    model.mode = input['mode'];
    model.persistent = input['persistent'];
    model.expressionIsColor = input['expressionIsColor'];
    model.expressionLabel = input['expressionLabel'];
    model.measureScheme = input['measureScheme'];
    model.reverseScheme = input['reverseScheme'];
    model.dimensionScheme = input['dimensionScheme'];
    model.dimensionId = input['dimensionId'];
    model.autoMinMax = input['autoMinMax'];
    model.measureMin = input['measureMin'];
    model.measureMax = input['measureMax'];
    return model;
  }
}

/// A [ModelEncoder] for [NxColor].
class NxColorEncoder extends Converter<NxColor, Map>
    implements ModelEncoder<NxColor> {
  @override
  Map convert(NxColor input) {
    var model = {};

    model['auto'] = input.auto;
    var singleColor = input.singleColor;
    if (singleColor != null) {
      model['singleColor'] = singleColor;
    }
    var mode = input.mode;
    if (mode != null) {
      model['mode'] = mode;
    }
    var persistent = input.persistent;
    if (persistent != null) {
      model['persistent'] = persistent;
    }
    var expressionIsColor = input.expressionIsColor;
    if (expressionIsColor != null) {
      model['expressionIsColor'] = expressionIsColor;
    }
    var expressionLabel = input.expressionLabel;
    if (expressionLabel != null) {
      model['expressionLabel'] = expressionLabel;
    }
    var measureScheme = input.measureScheme;
    if (measureScheme != null) {
      model['measureScheme'] = measureScheme;
    }
    var reverseScheme = input.reverseScheme;
    if (reverseScheme != null) {
      model['reverseScheme'] = reverseScheme;
    }
    var dimensionScheme = input.dimensionScheme;
    if (dimensionScheme != null) {
      model['dimensionScheme'] = dimensionScheme;
    }
    var dimensionId = input.dimensionId;
    if (dimensionId != null) {
      model['dimensionId'] = dimensionId;
    }
    var autoMinMax = input.autoMinMax;
    if (autoMinMax != null) {
      model['autoMinMax'] = autoMinMax;
    }
    var measureMin = input.measureMin;
    if (measureMin != null) {
      model['measureMin'] = measureMin;
    }
    var measureMax = input.measureMax;
    if (measureMax != null) {
      model['measureMax'] = measureMax;
    }

    return model;
  }
}
